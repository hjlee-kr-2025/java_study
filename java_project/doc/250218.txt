java  /  javascript
- 두 프로그램밍 언어는 다른 언어입니다.
- 문법에서 공통적인 부분이 많이 있습니다.
- 명령문 끝에 ; 을 사용합니다.
- 변수명에 : 영문자, 숫자, _ 를 사용할 수 있고, 숫자가 앞에 올 수 없습니다.
    (자바에서는 위규칙에 $를 추가로 사용할 수 있습니다)
- 연산자
	* 산술연산자 : +, -, *, /, %
	* 비교연산자 : >, >=, <, <=, ==, !==
	* 논리연산자 : &&, ||, !
	* 대입연산자 : =
- 조건문
	if () {
	}
	else if () {
	}
	else {
	}
	
	switch () {
	case 값1:
		break;
	default:
	}
- 반복문
	while () {
	}
	do {
	} while() ;
	for ( ; ; ) {
	}
	(자바에서는 향상된 for 문을 사용할 수 있습니다)
	for (배열저장자료형 변수명 : 배열변수명) {
		// 사용은 변수명으로 사용
	}

== 자바에서는
1. 변수에 자료형을 선언합니다.
기본자료형(8가지)
byte,		short,	int,		long
char,		float,	double,		boolean
Wrapper Class(8가지)	
Byte,		Short,	Integer,	Long
Character,	Float,	Double,		Boolean

2. 클래스 구조로 프로그래밍 됩니다.
- 멤버변수
- 메서드
- 클래스는 생성해야 사용할 수 있습니다.
	=> 생성자: 클래스이름으로 되어있는 반환자료형표시가 없는 메서드
예)
public class Student {
	// 멤버변수
	private int no;
	private String name;
	// 생성자
	public Student() {}
	//=> 기본생성자, 생성자구현이 없으면 컴파일러가 자동으로 만들어 줍니다.
	
	// 생성자
	public Student(int no, String name) {
		this.no = no;
		this.name = name;
	}
	//=> 생성자를 같은이름이 다양하게 사용할 수 있도록 하는것이
	// "오버로드" 라고 합니다.
	
	// private 변수는 클래스 내부에서만 사용할 수 있습니다.
	// private(자기만), public(모든클래스) : 접근제어자
	// private변수를 외부에서 값을 읽거나 변경하기위해 사용하는것이
	// getter와 setter입니다.
	// getter와 setter는 메서드 입니다.
	public int getNo() {
		return no;
	}
	public String getName() {
		return name;
	}
	public void setNo(int no) {
		this.no = no;
	}
	public void setName(String name) {
		this.name = name;
	}
	
}	

생성자의 오버로드
1. 이름이 같습니다.
2. 파라매터가 다릅니다.
public class Student {
	private int no;
	private String name;
	public Student() {}
	public Student(int no) {}
	public Student(int no, String name) {}
}

* 클래스는 상속을 합니다.
- 부모클래스의 멤버변수(field), 메서드를 자유롭게 사용할 수 있습니다.
- 메서드는 그래도도 사용하고, 일부변형 또는 전체 재구성해서 사용할 수 있습니다.
- 변형 또는 재구성하는 것은 "오버라이드"라고 합니다.
- 상속할때 사용하는 예약어는 extends 입니다.
public class 자식클래스 extends 부모클래스 {
}
- 부모클래스는 하나만 적을 수 있습니다.
- 모든 자바의 클래스는 Object 클래스를 상속받았습니다.
- toString(), equals(), clone(), hashCode() 

* static 예약어
1. 멤버변수또는 메서드 앞에 표시할때 클래스를 생성하지 않고도
변수와 함수를 사용할 수 있게 만들어 줍니다.
2. 다른클래스에서 접근할 때, 클래스이름. 으로 변수, 메서드를 접근해서 사용할 수 있습니다.

* 배열과 ArrayList 클래스
- 동일자료형의 데이터를 순서가 있도록 저장하고 사용하는 방법
- 배열은 저장할 데이터의 숫자가 처음 만들때 정해져 있습니다.
- 배열을 사용할때 불편한 점을 편리하게 쓸 수 있도록 ArrayList 클래스를 
만들어서 Java가 제공했습니다.
- ArrayList는 데이터를 자유롭게 저장하고 삭제할 수 있습니다.
- ArrayList 주요메서드
	* add() - 값을 추가
	* get(인덱스) - 값을 리턴합니다
	* remove(인덱스) - 값을 지우고 리턴합니다.
	* size() - 데이터 저장 개수 리턴

* 상속받은 클래스는 부모클래스로 선언하고 자녀클래스로 생성할 수 있습니다.
- 이때 선언한 변수를 가지고 자녀클래스에 있는 변수, 메서드를 사용하려면
  다운캐스팅을 해야합니다. 이때 확인하는 예약어가 instaceof 입니다.
  
 
* 추상클래스 (abstract)
public abstract class 클래스이름 {
} 
1. 추상클래스를 일반클래스가 상속을 받아서 사용합니다.
2. 추상클래스에는 abstract 메서드를 가질 수 있는데 상속받는 클래스는
이 메서드를 구현해야 합니다.
- abstract 메서드 : 구현내용없이 선언만 있는 메서드 입니다.
public abstract 함수이름();


* 인터페이스 (interface)
- 추상메서드만 가진 클래스를 interface 예약어를 사용해서 구현한 클래스입니다.
- 메서드 선언시 abstract 예약어를 사용하지 않아도 됩니다.
public interface 인터페이스이름 {
	public 함수이름();
	public 함수이름2();
}
- 인터페이스내부에 선언한 변수는 final static 붙어서 상수로 사용됩니다.

* final
- 변수 : 상수(데이터수정 불가)
- 메서스 : 오버라이드 불가
- 클래스 : 상속불가

* String 클래스
- 문자열를 저장하고 사용하기위한 클래스입니다.
- 문자열의 값을 변경안할 때 많이 씁니다.
- 데이터를 변경하는 경우가 많으면?
	StringBuffer, StringBuilder 클래스를 사용합니다.
	
* Class 클래스
- 클래스 정보를 관리하는 클래스
- 클래스를 동적할당할때 사용합니다.
	: Class.forName() 을 활용합니다.

* 컬렉션 프레임워크 - 자료를 관리하는 인터페이스, 클래스 집합
- 제네릭 : 여러자료형을 사용할 수 있는 방식
두가지 그룹
*Collection : 1가지 데이터
	- List : 순서가 있는
	- Set : 순서가 없는
	===> ArrayList	

*Map : <Key, Value> 쌍으로 이루어진 데이터
	===> HashMap


===============================================
람다식
- 자바에서 메서드(함수)를 사용할 때 클래식에서 구현된 메서드만 사용할 수가 있습니다.
- 람다식은 구현되지 않은 함수를 사용할 수 있도록 제공하는 기능
* 함수
int add(int num1, int num2) {
	return num1 + num2;
}
* 람다식으로 표현하면
(int num1, int num2) -> {return num1 + num2;}

 
Object 클래스 - 모든클래스의 상위클래스
: 모든클래스는 Object 클래스를 상속받았습니다.
public String toString() {
	return "패키지이름.클래스이름@참조주소값"
}
변수이름으로 System.out.println(변수이름); 을 사용하면
toString() 가 실행됩니다.
public boolean equals(Object obj) {
	return this == obj; // 참조주소값이 같으면 true
}
clone() -> 복제(깊은복사) -> 생성하고 같은데이터를 대입합니다.
hashCode() -> 참조주소값 리턴합니다.






		    