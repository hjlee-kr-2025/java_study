- 자바
* class 들의 모임
* class 중 public static void main(String[] args) {} 가 실행의 시작점
이 됩니다.
* class 이름의 첫글자는 대문자로 작성합니다.
* 명령문뒤에는 ';'을 붙입니다.

기본자료형 (4종류, 8가지)
1. 정수형 - byte, short, int(기본형), long
2. 문자형 - char : 1글자 저장 : '' 작은따옴표를 사용합니다.
3. 실수형 - float, double(기본형)
4. 논리형 - boolean : true, false

기본자료형은 아니지만 우리가 많이 쓰는 것(문자열)
String - 문자열에 관련된 class
사용예) String name;
	String name = "이현진"; - 값을 넣을때 "" 큰따옴표 사용
	
	
자바에서는 '' (작은따옴표) 와 "" (큰따옴표) 의 쓰임이 다릅니다.

((연산자))
* 산술연산사(계산) : +, -, *, /, %
* 대입연산자 :  =  : 오른쪽값을 왼쪽에 대입
* 비교연산자 :  >, >=, <, <=, ==, !=  : if, while 과 같이 사용
* 논리연산자 : &&(AND), ||(OR), !(NOT) : if, while 과 같이 사용
* 증감연산자 : ++, -- : 변수 앞이나 뒤에 붙여서 사용됩니다.

((조건문)) : if, switch~case~break
* 중간에 elseif 는 0개 이상 포함될 수 있습니다.
if (조건1) {
	조건1이 참일때 실행
}
else if (조건2) {
	조건1이 거짓이고 조건2가 참일때 실행
}
else {
	조건1, 조건2가 모두 거짓일 때 실행
}
*
switch (변수) {
case 값1:
	변수 == 값1 일때 실행
	break; - switch 를 빠져나간다.
case 값2:
	변수 == 값2 일때 실행
	break; - switch 를 빠져나간다.
default:
	변수값이 값1, 값2가 아닐때 실행
}

((반복문)) : while, do~while, for
*
while (조건) {
	조건이 '참' 인동안 반복실행
}
do {
	한번우선 실행, 그 후 while의 조건에 따라서 반복
} while (조건) ; - while(조건) 뒤에 ';'을 반드시 붙인다.
*
for (1.초기 ; 2.비교 ; 4.증감) {
	3.반복문 처리;
}
- '1.초기'는 한번만 실행
- '2.비교'가 참이면 '3','4' 실행후 2번비교
- '2.비교'가 거짓이면 for () {} 빠져나온다.

* 클래스
public class 클래스이름 {
	멤버변수; - 클래스 속성, 값
	메서드(함수); - 실행문, 처리할 내용, 데이터 변경 등
}
패키지 - 클래스와 위치하고있는 폴더와 같다 라고 생각하시면 됩니다.
	- 패키지의 이름은 전체가 소문자로 쓰여져야 합니다.
	- 계층구조를 만들기 위해 사용
	
	
자바에서 클래스이름의 첫글자는 대문자로 사용
함수, 변수이름의 첫글자는 소문자로 사용합니다.
그 이후의 글자들은 camel표기법을 사용해서 구성합니다.

public - 어디 클래스든 접근이 가능한 예약어 - 주로 메서드(함수)에 사용
private - 자신의 클래스에서만 접근 가능한 예약어 - 주로 변수에 사용

자바에서 클래스는 패키지가 다르면 다른 클래스입니다.
같은 패키지에서는 같은 이름의 클래스가 존재할 수 없습니다.

생성자
- 클래스이름과 같은 함수, 리턴type은 없고, 매개변수를 사용할 수 있습니다.
- 클래스에 생성자가 하나도 없으면, 자동으로 기본생성자를 만들어줍니다.
(기본생성자형식)
public 클래스이름() {
	처리내용없음;
}
- 생성자를 구현하면 위와같은 기본생성자는 만들어 지지않고 필요하다면
  개발자가 구현해야 합니다.
  
public class Student {
	int id;
	String name;
	
	생성자를 만들지 않으면 아래와 같은 생성자를 기본으로 만들어 줍니다.
	public Student() {
	}
	
	// 개발자가 만든 생성자
	public Student(int id, String name) {
		this.id = id;
		this.name = name;
	}
	==> 개발자가 만든 생성자가 있을때는 위의 기본생성자는 자동으로 만들어지지 않습니다.
}

public class StudentTest {
	public static void main(String[] args) {
		Student studentLee = new Student();
		// 기본생성자를 사용해서 생성 studentLee 안에 담았습니다.
	
	
	}
} 

클래스를 생성할때 생성자로 구현되어있는 것만 사용하실 수 있습니다.
