HTML, CSS, JAVASCRIPT
* HTML (HyperText Markup Language)
- Web에서 문서를 볼 수 있도록 하기 위해 + 링크(페이지이동)
<a> tag 가 페이지 이동을 위한 가장 보편적인 태그입니다.

HTML의 문서형식
<!DOCTYPE html> <!--으로 시작됩니다. 이 문서는 html5 형식으로 
					만들어진 문서입니다. -->
<html>
	<head>
	</head>
	<body>
	</body>
</html>

1. html 태그이름은 <> 안에 적습니다.
2. 일반적으로 시작태그와 종료태그가 있습니다.
	시작태그 : <태그이름>
	종료태그 : </태그이름>
3. 태그가 적힌 <> 안에 태그이름과 속성이 들어갈 수 있습니다.
4. 속성은 속성이름="값" 으로 이루어져 있습니다.
5. html에서 '' 와 "" 는 같은 기능을 합니다. 
6. vs 코드에서 확장자를 .html로 만든문서에서
 !누르고 [enter]를 하면 기본 형식의 html 코드를 작성해줍니다.
 
*** 태그
---- 구조화를 만드는 태그 (시맨틱태그, 블럭태그, div와 역할이 비슷)
header, footer, main, section, nav, article, ....

블럭레벨요소는 한 줄을 차지하는 태그를 말합니다.
* 문단제목 : <h1>~<h6> : 블럭레벨
	: h1 가장큰글씨, h6 가장작은글씨 : 일반글씨보다 굵은글씨
* 단락, 문단 : <p> : 블럭레벨 
* 강제 줄바꿈 : <br>

<strong>, <b> : 굵게
<em>, <i> : 기울임체, 이텔릭체
<ins>, <u> : 밑줄글씨
<del>, <s> : 삭제글씨

** 목록(순서가 있는 리스트, 순서가 없는 리스트)
<ol>
	<li>항목1</li>
	<li>항목2</li>
</ol>
=====> 위 내용이 웹에는 아래와 같이 표시
   1. 항목1
   2. 항목2
===> <ol type=""> : ol 태그안에 type속성값을 줌으로 리스트앞에 표시되는것을
	변경할 수 있습니다.
	type="1" : 숫자		: 1. 2. 3. 4. 
	type="A" : 대문자		: A. B. C. D.
	type="a" : 소문자		: a. b. c. d.
	type="I" : 로마대문자	: I. II. III. IV.
	type="i" : 로마소문자	: i. ii. iii. iv.
	
===> <ol start="숫자"> : ol 태그안에 start속성은 시작번호를 지정합니다.
예)	
	<ol type="A" start="3">
		<li>항목1</li>
		<li>항목2</li>
	</ol>
	===>
		C. 항목1
		D. 항목2
		
순서가 없는 (블릿으로 리스트앞에 표시됩니다)
<ul>
	<li>항목1</li>
	<li>항목2</li>
</ul>
===>
	* 항목1
	* 항목2


*** 표만들기(테이블) - 라인이 그려져 있는것은 아니다ㅏ.
<table>
	<caption> 표제목 </caption>
	<tr>
		<th>제목1</th>
		<th>제목2</th>
	</tr>
	<tr>
		<td>내용1</td>
		<td>내용2</td>
	</tr>
</table>


<img> : 이미지를 삽입하는 태그
<img src="이미지파일경로" alt="텍스트">
alt 속성은 어떤한 이유로 이미지를 불러오지 못했을때 표시하는 텍스트입니다.
- 종료태그가 없다.

* 오디오와 비디오
<audio src="오디오파일경로" controls></audio>
<video src="비디오파일경로" controls></video>

* 하이퍼링크
<a href="링크주소(이동할 주소)">화면에 표시할 텍스트</a>
==> 화면에 표시할 텍스트를 클릭하면 href에 적힌 주소로 이동합니다.
==> 디폴트로 현재 열려진 페이지에 새로운 페이지가 열립니다.
==> target="_blank" : target 속성에 "_blank"를 설정하면
새로운 탭에 링크주소가 열리게 됩니다.

사용자 입력을 위한 양식 Form (폼)
<form></form> 폼태그는 사용자입력을 서버에 전송하기 위한 태그입니다.
GET 방식 , POST 방식
GET 방식 -> 주소창을 이용해서 데이터를 전달하는 방식
POST 방식 -> html 코드와 같이 전달하는 방식
폼태그는 POST방식으로 전송할 수 있는 유일한 방법
<form action="" method="">
action 속성에는 주소가 들어갑니다.
method 속성에는 전송방식 : GET or POST

<fieldset>
	<legend>제목</legend>
</fieldset>
* fieldset 시각적으로 그룹화 시켜주는 태그
  legend fieldset 라인 중간에 텍스트로 보여주는 부분
 
** label 태그 : 이름을 붙으는 태그 - 입력요소 제목을 붙일때 사용
<label for="id값">제목</label>
<input type="text" id="id값">

** 사용자 입력을 받는 태그중 가장 기본이 되는 태그 : <input> 태그
<input type=""> ==> input태그의 기본표시내용
type="text" : 한 줄 텍스트입력 (기본)
type="password" : 한 줄 텍스트입력인데 화면에는 블릿으로 표시
type="email" : 한 줄 텍스트입력 + 이메일형식을 체크

type="checkbox" : 선택버튼, 여러개를 선택할 수 있는 요소
		- 관심사항을 체크할 때 많이 사용하는 타입입니다.
type="radio" : 여러개 선택 중 하나만 택할 때 (반드시 하나는 선택이 됩니다)
		- 성별
==> 같은 그룹으로 묶여있는 radio 버튼을 만들때 name 속성값을
    같은 값으로 만들어 줘야 합니다.		
		

날자, 시간
type="date"
type="time"

버튼
type="submit"	- 서버에 데이터를 전송합니다.
type="reset"	- 초기화 합니다.
type="button"	- 그냥 모양만 버튼입니다.

버튼타입은 <button></button> 태그를 이용할 수 있습니다.
<button type="submit">버튼이름</button> 
<button type="reset">버튼이름</button> 
<button type="button">버튼이름</button>
버튼태그에 type속성이 없으면 기본은 submit입니다. 

여러줄의 텍스트를 입력받을때
===> <textarea></textarea>

드랍다운 메뉴
<select>
	<option value="1">메뉴1</option>
	<option value="2">메뉴2</option>
</select>


<input> 태그 속성 중 기억하면 좋은것.
1. placeholder 속성 : placeholder="내용"
 : 값이 입력안되었을때 입력에 필요한 설명을 보여줄수 있는 속성
 : 데이터에 영향을 주지 않습니다.
2. required 속성 : required 쓰거나 안쓰거나
 : 이 input은 반드시 쓰여져야 합니다. (내용이 있어야 한다)
3. readonly : 화면에는 보여주나 수정은 안되는 것을 사용할때
4. hidden : 화면에 보이지는 않지만 서버에는 전달해야하는 데이터에 사용


CSS
- 선택자
<style>
선택자 {
	속성1 : 속성1값;
	속성2 : 속성2값;
	.....
}
</style>

** javascript **
변수선언
var 변수이름;
DOM(Document Object Model)
-- 트리구조
1. 계층적 (위,아래가 있다)
2. 위의 요소가 있어야 아래를 만들수 있다.
3. tag - element
   속성 - attribute
   내용 - text
4. 가지를 뻣어나갈수 있는요소는 element(tag) 입니다.
	속성, 내용은 tag의 하위요소로만 존재합니다.
	

- document.getElementById()
 : id값으로 element를 찾습니다. 첫번째만난 1개만 가져옵니다.
- document.getElementsByClassName()
 : class값으로 element 들을 찾습니다. 배열처럼 가져옵니다.
 : 1개만 있더라고 배열에 담긴 값으로 넘어와서 인덱스와 함께 사용하면 됩니다.
- document.getElementsByTagName()
 : tag 이름으로 element 들을 찾습니다. 클래스와 동일한방식으로 사용됩니다.
 
- document.querySelector()
- document.querySelectorAll()
 : CSS 선택자를 활용하여 element를 찾는 방식입니다.
 : querySelector() 는 처음만나는 1개만
 : querySelectorAll() 은 배열처럼 가져옵니다.
 
 
element 를 찾은 후에 무엇을 할것인가?
1. 내용을 바꿉니다.
 - innerText  => 적힌 내용을 text로 화면에 표시합니다.
 - innerHTML  => html 양식대로 만들어 줍니다.
 
2. 속성을 찾거나, 수정합니다.
 - getAttribute("속성명")
 - setAttribute("속성명", "속성값")   

3. 이벤트를 처리합니다.
 - 찾은element.이벤트명 = function() {
 		이벤트 발생시 처리 내용
 	}
 - 이벤트명앞에 on을 붙여서 사용하시면 됩니다.
 	: onclick, onsubmit, onchange
 	
4. 이벤트 처리 다른 방법
 - addEventListener() 메서드 사용
 - 찾은element.addEventListener("이벤트명", 함수)
 - 이벤트명은 on 없이 사용합니다.
 	: "click", "submit", "change"
 	
5. CSS 속성에 접근 할 수 있습니다.
 - 찾은element.style.backgroundColor = "black";
   => 위와같이 설정하면 배경색이 검정색으로 변경됩니다.
 - 자바스크립트에서 변수이름에 사용할 수 있는 값이
   영문자, _, 숫자만 가능하기 때문에
   CSS에서 속성중 -로 붙어있는것은
   -를 생략하고 -다음글자를 대문자로 변경하여 사용하시면 됩니다.
   예)
   CSS : background-color
   JS  : backgroundColor  




