* 단축키
[Ctrl]+[C] : 복사
[Ctrl]+[X] : 잘라내기
[Ctrl]+[V] : 붙여넣기
[Ctrl]+[S] : 저장
* 이클립즈 많이 사용하는 단축키
[Ctrl]+[Alt]+[위/아래화살표] : 한줄복사 또는 블럭복사
[Alt]+[위/아래화살표] : 한줄이동 또는 블럭이동
* 이클립스 .java 파일에서 많이 쓰는 단축키
[Ctrl]+[space] : 코드를 자동으로 완성할 수 있게 도와주는
[Alt]+[Shift]+[S] : source 팝업이 나오도록 합니다
  ==> getter, setter, 생성자
  
변수(기본자료형) - 4종류 8가지 - 정수형, 문자형, 실수형, 논리형
byte, short, int(기본), long
char : ''안에 한글자
float, double(기본)
boolean
String(클래스자료형) : 문자열 : ""

자바는 '' 와 ""를 구분해서 사용합니다.

연산자
산술연산자 : +, -, *, /, %
비교연산자 : >, >=, <, <=, ==, !=
논리연산자 : &&, ||, !
대입연산자 : = : 오른쪽에 있는 값을 왼쪽에 대입

조건문
* if문
if(조건1) {
}
else if (조건2) {
}
else {
}
* 3항연산자
(조건) ? (참) : (거짓);
* switch
switch (변수) {
case 값1:
	break;
case 값2:
	break;
default:
}

반복문
* while
while (조건) {
}
* do~while
do {
} while(조건) ;
* for
for (1 ; 2 ; 4) {
	3
}
for (배열에저장된자료형 변수명 : 배열변수명) {
	// 이곳에서 사용하는것은 변수명입니다.
}

((( 클래스, class )))
- 자바의 소스는 클래스이름.java 파일로 만들어 집니다.
- java 파일안에는 public 클래스가 1개만 존재합니다.
	: 파일이름가 같은 클래스를 public 으로 해야 합니다.
	: 파일이름도 대소문자 구별을 해야 합니다.
- package 를 가지고 있습니다. (클래스가 위치하는 폴더이름)
- 클래스는 맴버변수, 메서드로 이루어져 있습니다.
- 클래스를 사용하기위해서는 생성
	: 생성을 할때 사용하는것이 생성자
	: 생성자는 "public 클래스이름 () {}" 로 되어있습니다.
	: 생성자를 구현하지하지 않으면 기본생성자를 자동으로 만들어줍니다.
	: 생성자를 구현하면 기본생성자는 만들어주지 않습니다.
	: 생성자는 파라매터 개수가 다르면 여러개 만들어 줄 수있는데
		이것을 오버로드 라고 합니다.
- 접근제어자
	: public - 모든 클래스에서 
		"변수명." 을 통해 사용할 수 있습니다.
	: private (protected)	
		- private 은 혼자만 쓰겠다.
		- protected 자손클래스에서는 사용하도록 하겠다.
	데이터보관(처리) 용으로 사용하는 클래스는
	멤버변수를 private 으로 선언하고 사용하는 경우가 많습니다.
	그래서, 다른클래스에서 멤버변수를 직접접근해서 사용하지 못하고
	메서드를 통해서 값을 가져오거나 저장하게 만들어주는데
	이때 사용하는 메서드를 getter, setter 라고 부릅니다.
	예)
	public class Student {
		private int studentId;
		private String studentName;
		
		// getter
		public int getStudnetId() {
			return studentId;
		}
		public String getStudentName() {
			return studentName;
		}
		// setter
		public void setStudentId(int studentId) {
			this.studentId = studentId;
		}
		public void setStudentName(String studentName) {
			this.studentName = studentName;
		}
	}

** static
- 생성없이 사용할 수 있고
- 클래스에서 하나만 만들어지고
- static 으로 만들어진 변수는 다른 클래스에서 사용할때
 생성한 클래스 변수명이 아닌 클래스이름을 가지고 접근해서 사용합니다.
예)
public class Student {
	public static int serialNum = 1000;
}
public class StudentTest {
	public static void main(String[] args) {
		Student studentLee = new Student();
		System.out.println(studentLee.serialNum);
		-> 위방식으로 사용할 수도 있지만 아래방식을 주로 사용합니다.
		System.out.println(Student.serialNum);
	}
}
static 으로 만들어진 변수는 클래스가 새로 생성되었다고 값이 변경되지 않습니다.

배열 : 순서가 있는 같은 자료형의 데이터보관하는것 (인덱스)
* 배열의 선언
자료형[] 배열변수명 = new 자료형[개수];
자료형 배열변수명[] = new 자료형[개수];
* 초기값과 함께 선언
자료형[] 배열변수명 = {값1, 값2, 값3, ...};
* 인덱스는 0번부터 시작되고, 저장된개수-1 까지 있습니다.
* 배열은 선언할때 저장되는 개수가 정해져 있습니다.
==> 불편합니다.
==> 데이터 추가와 삭제를 편리하게하는 클래스
==> ArrayList
* ArrayList를 선언하고 생성하는 방법
ArrayList<자료형> 변수명 = new ArrayList<자료형>();

예)
ArrayList<int> numArray = new ArrayList<int>();
numArray.add(1);	// 값을 추가하는 add() 함수
numArray.add(2);
numArray.add(3);
for (int i = 0 ; i < numArray.size() ; ++i) {
	// 저장된개수를 알려주는 size() 함수
	System.out.println(numArray.get(i));
	// 값을 가져오는 get(인덱스) 함수
	// 값을 지우는 remove(인덱스) 함수
	// 데이터가 비어있는지 (하나도 없는지) 알려주는 isEmpty() 함수
	  
}


클래스 --> 상속
* 상속은 부모클래스가 가진 것을 자녀클래스가 사용할 수 있는것
* 상속의 발전 -> 오버라이드
  : 부모가 가진 함수를 재정의(처리문을 다시 작성하는것)

* 다형성
부모클래스로 선언하고 자녀클래스 생성자를 사용해서 메모리할당을 하는 것
=> ArrayList에 다양한 자녀클래스를 보관할 수 있도록 합니다.
=> 부모클래스로 선언한 변수를 가지고 자녀클래스에서만 있는 변수나 함수를
사용하고자 할때 다운캐스팅을 해야하고, 하기전 생성한 클래스 확인을 위해
사용하는 예약어가 instanceof 입니다.
예) Animal :부모클래스, Human은 Animal을 상속받은 클래스
==> public class Human extends Animal {}

Animal human = new Human();
if (human instanceof Human) {
	Human h = (Human) human; // 다운캐스팅
	// h 변수를 이용해서 Human클래스만 가지고 있는 변수 또는 함수를 사용합니다.
} 
====> 위 코드를 간단하게 줄이면
if (human instanceof Human h) {
	// h 변수로 Human클래스 사용가능
}


(( 추상클래스 )) -- abstract 단어를 기억해 두세요
public abstract class 클래스명 {
	// 0개 이상의 abstract 함수가 포함됩니다.
	public abstract 자료형 함수명(); 
}
1. 추상클래스는 0개 이상의 abstract 함수를 가지고 있습니다.
2. 추상클래스는 생성자를 사용할 수 없습니다.
3. 추상클래스를 상속받는 클래스는 abstract 함수를 구현해서 사용합니다.
4. 상속받는 클래스에서 abstract 함수를 구현하지 않으면
	상속받는 클래스도 abstract class 로 만들어야 합니다.


(( 인터페이스 )) -- 모든 함수가 abstract 함수로만 구성되어 있는 클래스
public interface 클래스명 {
	public 자료형 함수명();
}
1. 인터페이스는 inferface 예약어로 선언합니다.
2. 함수를 선언할 때 abstract 예약어를 생략할 수 있습니다.
3. 인터페이스를 상속받는 클래스는 implements 를 사용해서 상속받습니다.